#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Generador de Audios para Zhuyin/Bopomofo - VERSI√ìN DEFINITIVA
Genera autom√°ticamente archivos de audio para palabras y frases en chino mandar√≠n
usando Google Text-to-Speech (gTTS)

CORRECCI√ìN FINAL: Usa vocales apropiadas para consonantes que no funcionan con „Ñö
"""

import json
import os
import time
import re
from pathlib import Path
from typing import Dict, List, Any
import requests
from gtts import gTTS


class ZhuyinAudioGenerator:
    def __init__(self, json_file: str = "zhuyin_data.json", output_dir: str = "zhuyin_audios"):
        """
        Inicializa el generador de audios
        
        Args:
            json_file: Ruta al archivo JSON con los datos de zhuyin
            output_dir: Directorio donde se guardar√°n los audios
        """
        self.json_file = json_file
        self.output_dir = Path(output_dir)
        self.data = None
        self.delay = 1  # Delay entre requests para evitar rate limiting
        
        # Crear directorios
        self.create_directories()
        
    def create_directories(self):
        """Crea la estructura de directorios para organizar los audios"""
        directories = [
            self.output_dir,
            self.output_dir / "consonants" / "words",
            self.output_dir / "consonants" / "sentences",
            self.output_dir / "vowels" / "words", 
            self.output_dir / "vowels" / "sentences",
            self.output_dir / "tones" / "examples",
            self.output_dir / "individual_words",
            self.output_dir / "zhuyin_sounds"
        ]
        
        for directory in directories:
            directory.mkdir(parents=True, exist_ok=True)
            
    def load_data(self):
        """Carga los datos desde el archivo JSON"""
        try:
            with open(self.json_file, 'r', encoding='utf-8') as f:
                self.data = json.load(f)
            print(f"‚úì Datos cargados desde {self.json_file}")
        except FileNotFoundError:
            print(f"‚úó Error: No se encontr√≥ el archivo {self.json_file}")
            return False
        except json.JSONDecodeError:
            print(f"‚úó Error: El archivo {self.json_file} no tiene un formato JSON v√°lido")
            return False
        return True
        
    def check_internet_connection(self):
        """Verifica la conexi√≥n a internet"""
        try:
            requests.get("https://www.google.com", timeout=5)
            return True
        except requests.RequestException:
            return False
            
    def sanitize_filename(self, text: str) -> str:
        """Sanitiza el texto para usar como nombre de archivo"""
        # Remueve caracteres no v√°lidos para nombres de archivo
        sanitized = re.sub(r'[<>:"/\\|?*]', '', text)
        # Reemplaza espacios y puntuaci√≥n con guiones bajos
        sanitized = re.sub(r'[\s.,!?;:Ôºå„ÄÇÔºÅÔºüÔºõÔºö]', '_', sanitized)
        # Remueve guiones bajos m√∫ltiples
        sanitized = re.sub(r'_+', '_', sanitized)
        # Remueve guiones bajos al inicio y final
        sanitized = sanitized.strip('_')
        return sanitized
        
    def generate_audio(self, text: str, filename: str, lang: str = 'zh') -> bool:
        """
        Genera un archivo de audio usando gTTS
        
        Args:
            text: Texto a convertir en audio
            filename: Nombre del archivo de salida (sin extensi√≥n)
            lang: C√≥digo de idioma (zh para chino)
        
        Returns:
            bool: True si el audio se gener√≥ exitosamente
        """
        try:
            # Agregar extensi√≥n .mp3
            if not filename.endswith('.mp3'):
                filename += '.mp3'
                
            # Si el archivo ya existe, saltarlo
            if os.path.exists(filename):
                print(f"  ‚≠êÔ∏è  {os.path.basename(filename)} ya existe, saltando...")
                return True
                
            tts = gTTS(text=text, lang=lang, slow=False)
            tts.save(filename)
            print(f"  ‚úì Generado: {os.path.basename(filename)}")
            
            # Peque√±a pausa para evitar rate limiting
            time.sleep(self.delay)
            return True
            
        except Exception as e:
            print(f"  ‚úó Error generando {filename}: {str(e)}")
            return False
    
    def get_appropriate_vowel_for_consonant(self, zhuyin_consonant):
        """
        Devuelve la vocal apropiada para una consonante zhuyin espec√≠fica
        Corrige el problema de consonantes que no pueden combinarse con „Ñö
        """
        # Consonantes que NO pueden usar „Ñö (a) porque crean combinaciones inexistentes
        special_vowels = {
            '„Ñí': '„Ñß',  # xi (x + i) - natural en chino
            '„Ñë': '„Ñß',  # qi (q + i) - natural en chino
            '„Ñê': '„Ñß',  # ji (j + i) - natural en chino
            '„Ññ': '„Ñ®',  # ru (r + u) - m√°s natural que ra
        }
        
        # Debug: mostrar qu√© consonante estamos procesando
        if zhuyin_consonant in special_vowels:
            vowel = special_vowels[zhuyin_consonant]
            print(f"    üîß DEBUG: Consonante especial detectada: '{zhuyin_consonant}' -> usando vocal '{vowel}'")
            return vowel
        else:
            print(f"    ‚úì DEBUG: Consonante normal: '{zhuyin_consonant}' -> usando vocal '„Ñö'")
            return '„Ñö'
    
    def generate_zhuyin_sounds(self):
        """Genera audios para los sonidos individuales de zhuyin - VERSI√ìN CORREGIDA"""
        print("\nüîä Generando audios para sonidos zhuyin individuales...")
        print("üéØ Corrigiendo consonantes problem√°ticas: „Ñí, „Ñë, „Ñê, „Ññ")
        print("üîç Activando modo DEBUG para verificar procesamiento...")
        
        # Consonantes - CORREGIDO: Usa vocal apropiada para cada consonante
        consonant_count = 0
        special_count = 0
        
        for consonant in self.data['zhuyin_system']['consonants']:
            zhuyin = consonant['zhuyin']
            pinyin = consonant['pinyin']
            consonant_count += 1
            
            filename = self.output_dir / "zhuyin_sounds" / f"{self.sanitize_filename(zhuyin)}_{pinyin}.mp3"
            
            # Usar funci√≥n dedicada para obtener la vocal correcta
            vowel = self.get_appropriate_vowel_for_consonant(zhuyin)
            consonant_sound = zhuyin + vowel
            
            if vowel != '„Ñö':
                special_count += 1
                print(f"  üéµ [{consonant_count}] ESPECIAL: {zhuyin} ({pinyin}) como '{consonant_sound}'")
            else:
                print(f"  üéµ [{consonant_count}] Normal: {zhuyin} ({pinyin}) como '{consonant_sound}'")
            
            self.generate_audio(consonant_sound, str(filename))
        
        print(f"\nüìä Resumen: {special_count} consonantes especiales de {consonant_count} totales")
            
        # Vocales - mantener el comportamiento correcto existente
        print("\nüîä Generando audios para vocales...")
        for vowel in self.data['zhuyin_system']['vowels']:
            zhuyin = vowel['zhuyin']
            pinyin = vowel['pinyin']
            
            filename = self.output_dir / "zhuyin_sounds" / f"{self.sanitize_filename(zhuyin)}_{pinyin}.mp3"
            print(f"  üéµ Generando vocal {zhuyin} ({pinyin}) usando car√°cter zhuyin '{zhuyin}'")
            self.generate_audio(zhuyin, str(filename))
            
    def generate_consonant_audios(self):
        """Genera audios para consonantes, sus palabras y frases"""
        print("\nüîä Generando audios para consonantes...")
        
        consonants = self.data['zhuyin_system']['consonants']
        total = len(consonants)
        
        for i, consonant in enumerate(consonants, 1):
            zhuyin = consonant['zhuyin']
            pinyin = consonant['pinyin']
            
            print(f"\n[{i}/{total}] Procesando consonante {zhuyin} ({pinyin})")
            
            # Audio de la palabra ejemplo
            word = consonant['example_word']
            word_filename = self.output_dir / "consonants" / "words" / f"{self.sanitize_filename(zhuyin)}_{self.sanitize_filename(word['characters'])}_{word['pinyin']}.mp3"
            self.generate_audio(word['characters'], str(word_filename))
            
            # Audio de la frase ejemplo
            sentence = consonant['example_sentence']
            sentence_filename = self.output_dir / "consonants" / "sentences" / f"{self.sanitize_filename(zhuyin)}_{self.sanitize_filename(sentence['characters'][:10])}.mp3"
            self.generate_audio(sentence['characters'], str(sentence_filename))
            
            # Audios de palabras individuales en la frase
            for word_data in sentence['words']:
                individual_filename = self.output_dir / "individual_words" / f"{self.sanitize_filename(word_data['characters'])}_{word_data['pinyin']}.mp3"
                self.generate_audio(word_data['characters'], str(individual_filename))
                
    def generate_vowel_audios(self):
        """Genera audios para vocales, sus palabras y frases"""
        print("\nüîä Generando audios para vocales...")
        
        vowels = self.data['zhuyin_system']['vowels']
        total = len(vowels)
        
        for i, vowel in enumerate(vowels, 1):
            zhuyin = vowel['zhuyin']
            pinyin = vowel['pinyin']
            
            print(f"\n[{i}/{total}] Procesando vocal {zhuyin} ({pinyin})")
            
            # Audio de la palabra ejemplo
            word = vowel['example_word']
            word_filename = self.output_dir / "vowels" / "words" / f"{self.sanitize_filename(zhuyin)}_{self.sanitize_filename(word['characters'])}_{word['pinyin']}.mp3"
            self.generate_audio(word['characters'], str(word_filename))
            
            # Audio de la frase ejemplo
            sentence = vowel['example_sentence']
            sentence_filename = self.output_dir / "vowels" / "sentences" / f"{self.sanitize_filename(zhuyin)}_{self.sanitize_filename(sentence['characters'][:10])}.mp3"
            self.generate_audio(sentence['characters'], str(sentence_filename))
            
            # Audios de palabras individuales en la frase
            for word_data in sentence['words']:
                individual_filename = self.output_dir / "individual_words" / f"{self.sanitize_filename(word_data['characters'])}_{word_data['pinyin']}.mp3"
                self.generate_audio(word_data['characters'], str(individual_filename))
                
    def generate_tone_audios(self):
        """Genera audios para ejemplos de tonos"""
        print("\nüîä Generando audios para ejemplos de tonos...")
        
        tones = self.data['zhuyin_system']['tones']
        
        for tone in tones:
            tone_num = tone['tone_number']
            description = tone['description']
            example = tone['example']
            
            print(f"\nProcesando tono {tone_num}: {description}")
            
            filename = self.output_dir / "tones" / "examples" / f"tono_{tone_num}_{self.sanitize_filename(example['characters'])}_{example['pinyin']}.mp3"
            self.generate_audio(example['characters'], str(filename))
            
    def regenerate_consonant_sounds_only(self):
        """Regenera solo los sonidos de consonantes usando zhuyin"""
        if not self.load_data():
            return False
            
        if not self.check_internet_connection():
            print("‚úó Error: No hay conexi√≥n a internet. gTTS requiere conexi√≥n a internet.")
            return False
            
        print("üîß Regenerando TODOS los sonidos de consonantes usando zhuyin...")
        print("üéØ Corrigiendo consonantes problem√°ticas: „Ñí, „Ñë, „Ñê, „Ññ")
        print("üîç Activando modo DEBUG para verificar procesamiento...")
        
        # Crear directorio si no existe
        sounds_dir = self.output_dir / "zhuyin_sounds"
        sounds_dir.mkdir(parents=True, exist_ok=True)
        
        consonant_count = 0
        special_count = 0
        
        # Regenerar todas las consonantes usando l√≥gica corregida
        for consonant in self.data['zhuyin_system']['consonants']:
            zhuyin = consonant['zhuyin']
            pinyin = consonant['pinyin']
            consonant_count += 1
            
            filename = sounds_dir / f"{self.sanitize_filename(zhuyin)}_{pinyin}.mp3"
            
            # Eliminar archivo existente si existe
            if filename.exists():
                filename.unlink()
                print(f"  üóëÔ∏è  Eliminado archivo previo: {filename.name}")
            
            # Usar funci√≥n dedicada para obtener la vocal correcta
            vowel = self.get_appropriate_vowel_for_consonant(zhuyin)
            consonant_sound = zhuyin + vowel
            
            if vowel != '„Ñö':
                special_count += 1
                print(f"  üéµ [{consonant_count}] REGENERANDO ESPECIAL: {zhuyin} ({pinyin}) como '{consonant_sound}'")
            else:
                print(f"  üéµ [{consonant_count}] Regenerando normal: {zhuyin} ({pinyin}) como '{consonant_sound}'")
                
            self.generate_audio(consonant_sound, str(filename))
        
        print(f"\nüìä Resumen: {special_count} consonantes especiales de {consonant_count} totales")
        print("‚úÖ Regeneraci√≥n de consonantes completada!")
        return True
            
    def regenerate_vowel_sounds_only(self):
        """Regenera solo los sonidos de las vocales"""
        if not self.load_data():
            return False
            
        if not self.check_internet_connection():
            print("‚úó Error: No hay conexi√≥n a internet. gTTS requiere conexi√≥n a internet.")
            return False
            
        print("üîä Regenerando SOLO los sonidos de vocales zhuyin...")
        
        # Crear directorio si no existe
        sounds_dir = self.output_dir / "zhuyin_sounds"
        sounds_dir.mkdir(parents=True, exist_ok=True)
        
        # Regenerar solo las vocales
        for vowel in self.data['zhuyin_system']['vowels']:
            zhuyin = vowel['zhuyin']
            pinyin = vowel['pinyin']
            
            filename = sounds_dir / f"{self.sanitize_filename(zhuyin)}_{pinyin}.mp3"
            
            # Eliminar archivo existente si existe
            if filename.exists():
                filename.unlink()
                print(f"  üóëÔ∏è  Eliminado archivo previo: {filename.name}")
            
            print(f"  üéµ Regenerando vocal {zhuyin} ({pinyin}) usando car√°cter zhuyin '{zhuyin}'")
            self.generate_audio(zhuyin, str(filename))
            
        print("‚úÖ Regeneraci√≥n de vocales completada!")
        return True
    
    def test_consonant_vowel_mapping(self):
        """Funci√≥n de prueba para verificar qu√© vocales se asignan a cada consonante"""
        if not self.load_data():
            return False
            
        print("üîç MODO DEBUG: Verificando asignaci√≥n de vocales para consonantes")
        print("=" * 60)
        
        special_count = 0
        total_count = 0
        
        for consonant in self.data['zhuyin_system']['consonants']:
            zhuyin = consonant['zhuyin']
            pinyin = consonant['pinyin']
            total_count += 1
            
            vowel = self.get_appropriate_vowel_for_consonant(zhuyin)
            sound = zhuyin + vowel
            
            if vowel != '„Ñö':
                special_count += 1
                status = "üîß ESPECIAL"
            else:
                status = "‚úì Normal"
            
            print(f"{status} | {zhuyin:2} ({pinyin:3}) + {vowel} = {sound}")
        
        print("=" * 60)
        print(f"üìä Total: {total_count} consonantes")
        print(f"üîß Especiales: {special_count} („Ñí, „Ñë, „Ñê, „Ññ)")
        print(f"‚úì Normales: {total_count - special_count}")
        
        if special_count != 4:
            print(f"‚ö†Ô∏è  ADVERTENCIA: Se esperaban 4 consonantes especiales, se encontraron {special_count}")
        else:
            print("‚úÖ Configuraci√≥n correcta!")
            
        return True
            
    def generate_all_audios(self):
        """Genera todos los audios"""
        if not self.load_data():
            return False
            
        if not self.check_internet_connection():
            print("‚úó Error: No hay conexi√≥n a internet. gTTS requiere conexi√≥n a internet.")
            return False
            
        print("üéµ Iniciando generaci√≥n de audios para Zhuyin/Bopomofo (VERSI√ìN DEFINITIVA)")
        print(f"üìÅ Los audios se guardar√°n en: {self.output_dir.absolute()}")
        print("üéØ Usando SIEMPRE caracteres zhuyin con vocales fon√©ticamente correctas")
        print("üîß Corrigiendo „Ñí, „Ñë, „Ñê (con „Ñß) y „Ññ (con „Ñ®)")
        
        start_time = time.time()
        
        try:
            # Generar audios por categor√≠as
            self.generate_zhuyin_sounds()
            self.generate_consonant_audios()
            self.generate_vowel_audios()
            self.generate_tone_audios()
            
            elapsed_time = time.time() - start_time
            print(f"\n‚úÖ ¬°Generaci√≥n completada en {elapsed_time:.1f} segundos!")
            print(f"üìÅ Todos los audios se han guardado en: {self.output_dir.absolute()}")
            
            # Mostrar estad√≠sticas
            self.show_statistics()
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  Generaci√≥n interrumpida por el usuario")
            return False
        except Exception as e:
            print(f"\n‚úó Error inesperado: {str(e)}")
            return False
            
        return True
        
    def show_statistics(self):
        """Muestra estad√≠sticas de los archivos generados"""
        print("\nüìä Estad√≠sticas:")
        
        for subdir in self.output_dir.rglob("*"):
            if subdir.is_dir():
                mp3_files = list(subdir.glob("*.mp3"))
                if mp3_files:
                    relative_path = subdir.relative_to(self.output_dir)
                    print(f"  üìÇ {relative_path}: {len(mp3_files)} archivos")
                    
    def clean_audio_files(self):
        """Limpia todos los archivos de audio generados"""
        if not self.output_dir.exists():
            print("No hay archivos que limpiar.")
            return
            
        response = input(f"¬øEst√°s seguro de que quieres eliminar todos los archivos en {self.output_dir}? (s/N): ")
        if response.lower() == 's':
            import shutil
            shutil.rmtree(self.output_dir)
            print("‚úì Archivos limpiados.")
        else:
            print("Operaci√≥n cancelada.")


def main():
    """Funci√≥n principal"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Generador de audios para Zhuyin/Bopomofo - VERSI√ìN DEFINITIVA")
    parser.add_argument("--json", default="zhuyin_data.json", help="Archivo JSON con datos de zhuyin")
    parser.add_argument("--output", default="zhuyin_audios", help="Directorio de salida para audios")
    parser.add_argument("--clean", action="store_true", help="Limpiar archivos de audio existentes")
    parser.add_argument("--delay", type=float, default=1.0, help="Delay entre requests (segundos)")
    parser.add_argument("--fix-vowels", action="store_true", help="Regenerar solo los sonidos de vocales")
    parser.add_argument("--fix-consonants", action="store_true", help="Regenerar solo los sonidos de consonantes (corrige „Ñí, „Ñë, „Ñê, „Ññ)")
    parser.add_argument("--test-mapping", action="store_true", help="Probar asignaci√≥n de vocales sin generar audios (modo debug)")
    
    args = parser.parse_args()
    
    generator = ZhuyinAudioGenerator(args.json, args.output)
    generator.delay = args.delay
    
    if args.clean:
        generator.clean_audio_files()
        return
        
    if args.test_mapping:
        success = generator.test_consonant_vowel_mapping()
        if success:
            print("\nüí° Si ves que las consonantes „Ñí, „Ñë, „Ñê, „Ññ est√°n marcadas como ESPECIALES,")
            print("   entonces el c√≥digo est√° funcionando correctamente.")
            print("\nüöÄ Ejecuta: python ultima_version.py --fix-consonants")
        else:
            print("\n‚úó Error al verificar el mapeo.")
        return
        
    if args.fix_vowels:
        success = generator.regenerate_vowel_sounds_only()
        if success:
            print("\nüéâ ¬°Vocales corregidas exitosamente!")
        else:
            print("\n‚úó Error al corregir las vocales.")
        return
        
    if args.fix_consonants:
        success = generator.regenerate_consonant_sounds_only()
        if success:
            print("\nüéâ ¬°Consonantes regeneradas exitosamente!")
            print("üéØ Ahora TODAS las consonantes usan caracteres zhuyin apropiados:")
            print("  ‚Ä¢ „Ñí, „Ñë, „Ñê + „Ñß (xi, qi, ji) - combinaciones v√°lidas")
            print("  ‚Ä¢ „Ññ + „Ñ® (ru) - m√°s natural que ra")
            print("  ‚Ä¢ Resto + „Ñö - funcionan perfectamente")
            print("üìñ Esto resuelve el problema de audios silenciosos")
        else:
            print("\n‚úó Error al regenerar las consonantes.")
        return
        
    success = generator.generate_all_audios()
    
    if success:
        print("\nüéâ ¬°Proceso completado exitosamente!")
        print("\nüìñ C√≥mo usar los audios:")
        print("  ‚Ä¢ consonants/words/: Palabras ejemplo para cada consonante")
        print("  ‚Ä¢ consonants/sentences/: Frases ejemplo para cada consonante")
        print("  ‚Ä¢ vowels/words/: Palabras ejemplo para cada vocal")
        print("  ‚Ä¢ vowels/sentences/: Frases ejemplo para cada vocal")
        print("  ‚Ä¢ tones/examples/: Ejemplos de tonos")
        print("  ‚Ä¢ individual_words/: Todas las palabras individuales")
        print("  ‚Ä¢ zhuyin_sounds/: Sonidos individuales de zhuyin")
        print("\nüí° Comandos √∫tiles:")
        print("    python ultima_version.py --test-mapping     # Verificar mapeo (debug)")
        print("    python ultima_version.py --fix-consonants   # Corregir consonantes")
        print("    python ultima_version.py --fix-vowels       # Regenerar vocales")
        print("\nüéØ MEJORA: Corrige consonantes problem√°ticas con vocales apropiadas")
        print("  ‚Ä¢ „Ñí, „Ñë, „Ñê + „Ñß (xi, qi, ji - combinaciones v√°lidas)")
        print("  ‚Ä¢ „Ññ + „Ñ® (ru - m√°s natural que ra)")
        print("  ‚Ä¢ Resto + „Ñö (funcionan perfectamente)")
        print("\nüîç Para verificar: python ultima_version.py --test-mapping")
    else:
        print("\n‚úó El proceso no se complet√≥ correctamente.")


if __name__ == "__main__":
    main()